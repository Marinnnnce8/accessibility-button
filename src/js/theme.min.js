var $nb = NB.util,
  $uk = UIkit.util,
  theme = {
    init: function () {
      this.ga(), this.blocks();
    },
    ga: function () {
      var a = $nb.$("ga", "[data]");
      if (a) {
        var t = $nb.data(a, "ga");
        $uk.isObject(t) &&
          ($uk.isObject(t.options) || (t.options = {}),
          (window.dataLayer = window.dataLayer || []),
          e("js", new Date()),
          e("config", t.id, t.options));
      }
      function e() {
        dataLayer.push(arguments);
      }
    },
    blocks: function () {
      var i = ["uk-table", "uk-table-justify"],
        o = ["left", "right", "center"],
        u = {
          pdf: ["pdf"],
          word: ["doc", "docx"],
          excel: ["xls", "xlsx"],
          powerpoint: ["ppt", "pptx"],
          archive: ["zip", "tar"],
        };
      $nb.$$("nb-block").forEach(function (a) {
        switch ($uk.data(a, "nb-block")) {
          case "content":
            for (var t in ($uk.$$("table", a).forEach(function (a) {
              $uk.addClass(a, i),
                $uk.wrapAll(a, "<div class='uk-overflow-auto'>");
            }),
            $uk
              .$$("a[href]", a)
              .filter(function (a) {
                return $uk.attr(a, "href").match(/\.(jpg|jpeg|png|gif|webp)/i);
              })
              .forEach(function (a) {
                var t = a.parentNode,
                  e = $uk.$("figcaption", t);
                UIkit.lightbox(t, { animation: "fade" }),
                  e && $uk.attr(a, "data-caption", $uk.html(e));
                for (var n = 0; n < o.length; n++) {
                  var r = o[n];
                  $uk.hasClass(t, "align_" + r) &&
                    UIkit.scrollspy(t, {
                      cls:
                        "uk-animation-slide-" +
                        ("center" == r ? "bottom" : r) +
                        "-small",
                    });
                }
              }),
            u))
              for (var e = u[t], n = 0; n < e.length; n++) {
                var r = $uk.$$(
                  "a[href$='." +
                    e[n] +
                    "']:not(.nb-file-icon):not(.nb-no-icon)",
                  a
                );
                r.length &&
                  r.forEach(function (a) {
                    $uk.prepend(
                      a,
                      $nb.ukIcon(
                        "pdf" == t
                          ? "file-pdf"
                          : "archive" == t
                          ? "album"
                          : "file-text"
                      )
                    ),
                      $uk.addClass(a, "nb-file-icon nb-file-icon-" + t);
                  });
              }
            break;
          case "embed":
            $uk.$$("iframe", a).forEach(function (a) {
              $uk.attr(a, "data-uk-responsive", !0);
            }),
              UIkit.update();
        }
      });
    },
  };
function renderItems(a, t) {
  for (
    var e = "",
      n = ["uk-grid-match", "uk-child-width-1-2@s"],
      r = $nb.ukWidths(n),
      i = 0;
    i < a.length;
    i++
  ) {
    var o = a[i],
      u = $nb.wrap(
        $nb.wrap(o.title, { href: o.url, class: "uk-link-reset" }, "a"),
        { class: ["uk-card-title", "uk-margin-remove-bottom"] },
        "h3"
      ),
      c = o.getImage
        ? $nb.img(
            o.getImage,
            { alt: o.title, sizes: !!r.length && r.join(", ") },
            { "uk-img": { target: "!* +*" } }
          )
        : "",
      l = o.getSummary ? $nb.wrap(o.getSummary, "p") : "",
      d = $nb.wrap(
        t.more ? t.more : $nb.ukIcon("more"),
        { href: o.url, class: ["uk-button", "uk-button-text"] },
        "a"
      );
    e += $nb.wrap(
      $nb.wrap(
        (c
          ? $nb.wrap($nb.wrap(c, { href: o.url }, "a"), "uk-card-media-top")
          : "") +
          $nb.wrap(
            u +
              (o.date_pub ? $nb.wrap(o.date_pub, "uk-text-meta") : "") +
              (o.dates ? $nb.wrap(o.dates, "uk-text-meta") : "") +
              (o.location ? $nb.wrap(o.location, "uk-text-meta") : ""),
            "uk-card-header"
          ) +
          (l ? $nb.wrap(l, "uk-card-body") : "") +
          $nb.wrap(d, "uk-card-footer"),
        "uk-card uk-card-default"
      ),
      "div"
    );
  }
  return $nb.wrap(
    e,
    {
      class: n,
      "data-uk-grid": !0,
      "data-uk-scrollspy": {
        target: "> div",
        cls: "uk-animation-slide-bottom-small",
        delay: NB.options.speed,
      },
    },
    "div"
  );
}

var accessibilityButton = document.getElementsByClassName(
    "js-toggle-accessibility"
  )[0],
  accessibility = document.getElementsByClassName("accessibility")[0],
  accessibilityButtons = document.getElementsByClassName(
    "accessibility-button"
  ),
  accessibilityActive = "accessibility-active",
  resizeButtonFont = document.getElementsByClassName("js-resize-font"),
  resizeButtonFontPlus = document.getElementsByClassName("js-resize-plus")[0],
  resizeButtonFontPlusClass = "js-resize-plus",
  resizeFontClass = "accessibility-resize-font-",
  resizeFontClassNew = "",
  isResizedFont = false,
  pageContent = document.body,
  incrementNum = 120,
  accessibilityFilterButtons = document.getElementsByClassName("js-accessibility-filter-button"),
  grayscaleButton = document.getElementsByClassName("js-grayscale-page")[0],
  grayscaleClass = "accessibility-grayscale",
  highContrastButton = document.getElementsByClassName("js-high-contrast")[0],
  highContrastClass = "accessibility-high-contrast",
  negativeContrastButton = document.getElementsByClassName(
    "js-negative-contrast"
  )[0],
  negativeContrastClass = "accessibility-negative-contrast",
  lightBackgroundButton = document.getElementsByClassName(
    "js-light-background"
  )[0],
  lightBackgroundClass = "accessibility-light-background",
  linksUnderlineButton = document.getElementsByClassName(
    "js-links-underline"
  )[0],
  linksUnderlineClass = "accessibility-links-underline",
  readableFontButton = document.getElementsByClassName("js-readable-font")[0],
  readableFontClass = "accessibility-readable-font",
  resetAccessibilityButton = document.getElementsByClassName("js-reset")[0],
  accessibilityPrefix = "accessibility-",
  accessibilityButtonActiveClass = "accessibility-button-active",
  newFilterClass = "";

function removeClassByPrefix(el, prefix) {
  for (var i = 0; i < accessibilityButtons.length; i++) {
    accessibilityButtons[i].classList.remove(accessibilityButtonActiveClass);
  }
  var regx = new RegExp("\\b" + prefix + "(.*)?\\b", "g");
  el.className = el.className.replace(regx, "");
  return el;
}

function toggleAccessibilityToolbar(nav) {
  if (nav.classList.contains(accessibilityActive)) {
    nav.classList.remove(accessibilityActive);
  } else {
    nav.classList.add(accessibilityActive);
  }
}

function resizeFont() {
  if (resizeFontClassNew.length) {
    document.body.classList.remove(resizeFontClassNew);
  }
  if (this.classList.contains(resizeButtonFontPlusClass)) {
    if (incrementNum < 200) {
      incrementNum += 10;
    }
    resizeFontClass = resizeFontClass + incrementNum;
    document.body.classList.add(resizeFontClass);
    this.classList.add(accessibilityButtonActiveClass);
    resizeFontClassNew = resizeFontClass;
    resizeFontClass = resizeFontClass.slice(0, -3);
    isResizedFont = true;
  } else {
    if (isResizedFont) {
      if (incrementNum > 110) {
        incrementNum -= 10;
        if (incrementNum === 120) {
          resizeButtonFontPlus.classList.remove(accessibilityButtonActiveClass);
          document.body.classList.remove(resizeFontClass);
          isResizedFont = false;
          return;
        }
      }
      resizeFontClass = resizeFontClass + incrementNum;
      document.body.classList.add(resizeFontClass);
      resizeFontClassNew = resizeFontClass;
      resizeFontClass = resizeFontClass.slice(0, -3);
    }
  }
}

function filterPage(filterContent, filterClass, obj) {
  for(i = 0;i < accessibilityFilterButtons.length;i++){
    accessibilityFilterButtons[i].classList.remove(accessibilityButtonActiveClass);
  }
  if (newFilterClass === "" || filterClass === newFilterClass) {
    if (filterContent.classList.contains(filterClass)) {
      filterContent.classList.remove(filterClass);
      // obj.classList.remove(accessibilityButtonActiveClass);
    } else {
      filterContent.classList.add(filterClass);
      obj.classList.add(accessibilityButtonActiveClass);
      newFilterClass = filterClass;
    }
  }
  if (filterClass !== newFilterClass) {
    filterContent.classList.remove(newFilterClass);
    if (filterContent.classList.contains(filterClass)) {
      filterContent.classList.remove(filterClass);
      // obj.classList.remove(accessibilityButtonActiveClass);
    } else {
      filterContent.classList.add(filterClass);
      obj.classList.add(accessibilityButtonActiveClass);
      newFilterClass = filterClass;
    }
  }
}

function textChange(textContent, textClass, obj) {
  if (textContent.classList.contains(textClass)) {
    textContent.classList.remove(textClass);
    obj.classList.remove(accessibilityButtonActiveClass);
  } else {
    textContent.classList.add(textClass);
    obj.classList.add(accessibilityButtonActiveClass);
  }
}

accessibilityButton.addEventListener(
  "click",
  function () {
    toggleAccessibilityToolbar(accessibility);
  },
  false
);

for (var i = 0; i < resizeButtonFont.length; i++) {
  resizeButtonFont[i].addEventListener("click", resizeFont, false);
}

grayscaleButton.addEventListener("click", function () {
  filterPage(pageContent, grayscaleClass, this);
});

highContrastButton.addEventListener("click", function () {
  filterPage(pageContent, highContrastClass, this);
});

negativeContrastButton.addEventListener("click", function () {
  filterPage(pageContent, negativeContrastClass, this);
});

lightBackgroundButton.addEventListener("click", function () {
  filterPage(pageContent, lightBackgroundClass, this);
});

linksUnderlineButton.addEventListener("click", function () {
  textChange(pageContent, linksUnderlineClass, this);
});

readableFontButton.addEventListener("click", function () {
  textChange(pageContent, readableFontClass, this);
});

resetAccessibilityButton.addEventListener("click", function () {
  removeClassByPrefix(pageContent, accessibilityPrefix);
});

$uk.ready(function () {
  theme.init();
});
